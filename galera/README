For deploying galera, add "./inventory" file to specify the hosts as per your requirements. For example, I have added a host as 54.201.178.145 with its key.

1. Deploy package which includes install galera-3, galera-arbitrator-3, mysql-wsrep-5.6, and python-mysqldb
   a) Disable AppArmor
   -- use disableAppArmor.yml playlist which executes the following steps on host node:
	1)ln -s {/etc/apparmor.d,/etc/apparmor.d/disable}/usr.sbin.mysqld
        2)sudo service  apparmor restart
   -- Commands used to run this play-list
	ansible-playbook -v disableAppArmor.yaml -i inventory -u ubuntu
	ansible-playbook  -v deploy_package.yaml -i inventory -u ubuntu
   b) Enable Codership repository
  	ansible-playbook -v enable_codership_repository.yaml -i inventory -u ubuntu
   c) Configure swap space
   	ansible-playbook  -v configure_swap_space.yaml -i inventory -u ubuntu

2. Apply configuration
        ansible-playbook  -v apply_config.yaml -i inventory -u ubuntu

3. Service start/stop.
   -- I have created service_state.yaml playlist to start/stop/status/restart mysql service, in this we have to define the operation as started/stopped/restarted/status and extra_arg as --wsrep-new-cluster/''.
      Master node:
	ansible-playbook -v service_state.yaml -i inventory -u ubuntu -e "operation=started extra_arg=--wsrep-new-cluster"
      Other nodes:
	ansible-playbook -v service_state.yaml -i inventory -u ubuntu -e "operation=started extra_arg=''"

	ansible-playbook -v service_state.yaml -i inventory -u ubuntu -e operation=stopped
	ansible-playbook -v service_state.yaml -i inventory -u ubuntu -e operation=restarted
	ansible-playbook -v service_state.yaml -i inventory -u ubuntu -e operation=status
